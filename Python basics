{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "l6r_O_1D8y_i"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q.1 What is python and why it is popuplar?\n",
        "\n",
        "- python is a programming language which is introduced by Guido Van Rossum in 1991. It is used in many sector such as web development, data science, making games , etc.It is one of the most popular language because of its simplicity and easy to understand.\n",
        "\n",
        "Q.2 What is an interpreater in python?\n",
        "- Interpreater in python is like translator which converts the high level language into machine language.Interpreated means it exicutes the code line by line.\n",
        "\n",
        "Q.3What are predefined keywords in python?\n",
        "- Keywords are the pre defined or reserved words which is used to form syntax of the python language to perform the structural and functional part of coading.keywords are always written in the smaller latter expect the True and False.It can not be used as the keywords, identifiers,etc.\n",
        "\n",
        "Q.4 Can keywords be used as variable names?\n",
        "- No, keywords can not be used as variable names.\n",
        "   \n",
        "Q.5 What is mutability in Python?\n",
        "- Mutability in Python can be defined as the data or object that can not be modified after creations. Example : sets,list,dictinary,etc\n",
        "\n",
        "Q.6 Why are lists mutable, but tuples are immutable ?\n",
        "- List is mutable because it can be modify after the creations but tuples are immutable because it can not be modified after the creations.list are enclosed in square bracket while tuples are enclosed in pranthesis.\n",
        "\n",
        "Q.7 What is the difference between \"==\" and \"is\" operators in Python?\n",
        "- \"==\" is known as equality operator which is used check the two given values are equall or not while \"is\" operator is one of the identity operators which is used to compare objects on their identity.\n",
        "\n",
        "Q.8 What is logical operators in Python?\n",
        "- Logical operators in Python are the keywords which is used to combine multiple conditions in a single line. The logical operators in python are : and, or , not, etc.\n",
        "\n",
        "Q.9 What is type casting in Python?\n",
        "- Type casting is the method to change the type of datatype from to another datatype. You can convert numbers into string but you can't convert string into number type such as int(),float(),complex().\n",
        "\n",
        "Q.10 What is the difference between implicit and explicit type castng?\n",
        "- Explicit type casting means the type casting which is done by the user or programmer manullay while implicit type casting means the type casting which is done by the  python compiler automatically.\n",
        "\n",
        "Q.11 What is the purpose of conditional  statements in Python ?\n",
        "- Conditional statements in Python is used to make decision on values of the variable or the result of the comparision.if,elif,else are the conditional statements\n",
        "\n",
        "Q.12 How does the elif statement work?\n",
        "- The elif statement allows you to check multiple conditions in sequence, and execute different code blocks depending on which condition is true. Here's the basic syntax:\n",
        "\n",
        "if condition1:\n",
        "    # code to execute if condition1 is true\n",
        "elif condition2:\n",
        "    # code to execute if condition1 is false and condition2 is true\n",
        "elif condition3:\n",
        "    # code to execute if condition1 and condition2 are false, and condition3 is true\n",
        "else:\n",
        "    # code to execute if all conditions are false\n",
        "The elif statement is short for \"else if\", and can be used multiple times to check additional conditions.\n",
        "\n",
        "Q.13 What is the difference between for and while loop?\n",
        "- The for loop is used when you know in advance how many times you want to execute the block of code.\n",
        "It iterates over a sequence (e.g., a list, tuple, string, or range) and executes the block of code for each item in the sequence.\n",
        "The loop variable (variable) takes the value of each item in the sequence during each iteration.\n",
        "The while loop is used when you don't know in advance how many times you want to execute the block of code. It continues to execute as long as the specified condition is true.\n",
        "It's important to make sure that the condition eventually becomes false; otherwise, the loop will run indefinitely, resulting in an infinite loop\n",
        "\n",
        "Q.14 Describe a scenario where a while loop is more suitable than a for loop ?\n",
        "-  for loop can iterate over a sequence of iterable objects in python.Iterating over a sequence is nothing but iterating over strings, list, tuples,sets,and dictionaries\n",
        "\n",
        "while loops execute statements while the conditions is true .as soon as the condition became false, the interpreater comes out of the while loop.\n"
      ],
      "metadata": {
        "id": "pp7XkUs38zow"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# PRATICAL\n"
      ],
      "metadata": {
        "id": "xLllTsrZT5rK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Q.1 Write a python program to print \"hello,World!\"\n",
        "print('\"Hello,World!\"')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OuZcgF1ITz77",
        "outputId": "aa40d3e5-d5a2-4887-da0f-1375457442c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\"Hello,World!\"\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Q.2 Write aPython program that displays your name and age.\n",
        "a= input(\"what is your name:\")\n",
        "b= input (\"what is your age:\")\n",
        "print(f\"hello {a}\")\n",
        "print(f\"your age is {b}\")\n",
        "#Or\n",
        "print('My name is Shubham Mishra')\n",
        "print('I am 21 years old')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZVYvnzykXIeC",
        "outputId": "21f40839-95bd-47b8-b54c-c14f2d61a2fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "what is your name:shubham\n",
            "what is your age:18\n",
            "hello shubham\n",
            "your age is 18\n",
            "My name is Shubham Mishra\n",
            "I am 21 years old\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q.3 Write code to print all the pre defined keywords in python using the keyword library.\n",
        "import keyword\n",
        "print(keyword.kwlist)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MgEeQiHSdUIu",
        "outputId": "ebba5d06-d2ce-42cc-865a-4982b9c6e4a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Q.4 Write a program that checks if a given word is a python keyword\n",
        "import keyword\n",
        "\n",
        "def is_python_keyword(word):\n",
        "    return keyword.iskeyword(word)\n",
        "\n",
        "word = input(\"Enter a word: \")\n",
        "if is_python_keyword(word):\n",
        "    print(f\"'{word}' is a Python keyword.\")\n",
        "else:\n",
        "    print(f\"'{word}' is not a Python keyword.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iupVvh_xeGG-",
        "outputId": "475a0fcf-31f2-4961-f6b1-d39954c8a64a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter a word: False\n",
            "'False' is a Python keyword.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q.5Create a list and tuple in Python, and demonstrate how attempting to change an element works differently for each?\n",
        "list1 = [\"10\",\"20\",\"30\",\"40\"]\n",
        "print('original list:', list1)\n",
        "list1[0]=11\n",
        "print(\"changed list : \",list1)\n",
        "print(\"so list are mutable\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8Sn_rVXklKud",
        "outputId": "c3f8dc66-e747-4fe3-d101-6c71a6472239"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "original list: ['10', '20', '30', '40']\n",
            "changed list :  [11, '20', '30', '40']\n",
            "so list are mutable\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#tuples are immutable\n",
        "tuple1= (\"60\",\"70\",\"80\",\"90\")\n",
        "tuple1[1]=28"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "_aBR8DjOoX6d",
        "outputId": "3139215b-e820-4f0a-f6d1-1504e3a3711a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "'tuple' object does not support item assignment",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-43-b10e516972fd>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mtuple1\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m\"60\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"70\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"80\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"90\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtuple1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m28\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q.6 Write a function to demonstrate the behavior of mutable and immutable arguments\n",
        "list1 = [\"10\",\"20\",\"30\",\"40\"]\n",
        "print('original list:', list1)\n",
        "list1[0]=11\n",
        "print(\"changed list : \",list1)\n",
        "print(\"so list are mutable\")\n",
        "#tuples are immutable\n",
        "tuple1= (\"60\",\"70\",\"80\",\"90\")\n",
        "tuple1[1]=28\n"
      ],
      "metadata": {
        "id": "yBB-IiESo_gV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Q.8 Write a program to demonstrate the use of logical operators\n",
        "# Define variables\n",
        "x = 5\n",
        "y = 3\n",
        "z = 2\n",
        "\n",
        "# AND operator\n",
        "print(\"x > 3 and y < 4:\", x > 3 and y < 4)  # Expected output: True\n",
        "print(\"x > 3 and y > 4:\", x > 3 and y > 4)  # Expected output: False\n",
        "\n",
        "# OR operator\n",
        "print(\"x > 3 or y < 2:\", x > 3 or y < 2)  # Expected output: True\n",
        "print(\"x < 3 or y < 2:\", x < 3 or y < 2)  # Expected output: False\n",
        "\n",
        "# NOT operator\n",
        "print(\"not (x > 3):\", not (x > 3))  # Expected output: False\n",
        "print(\"not (x < 3):\", not (x < 3))  # Expected output: True\n",
        "\n",
        "# Combining operators\n",
        "print(\"x > 3 and (y < 4 or z == 2):\", x > 3 and (y < 4 or z == 2))  # Expected output: True\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2zr-EzYUqoW0",
        "outputId": "3ac6f6f6-b685-4f4b-8bad-6c2d8e92f106"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x > 3 and y < 4: True\n",
            "x > 3 and y > 4: False\n",
            "x > 3 or y < 2: True\n",
            "x < 3 or y < 2: False\n",
            "not (x > 3): False\n",
            "not (x < 3): True\n",
            "x > 3 and (y < 4 or z == 2): True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Q.9 Write a Python program to convert user input from string to integer, float, and boolean types\n",
        "\n"
      ],
      "metadata": {
        "id": "gqOLUU-arftE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#q.10 Write a for loop to print numbers from i 1 to 10\n",
        "for a in range(1,11):\n",
        "  print(a)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qbTTXh3itirl",
        "outputId": "f4e86890-2018-4228-a6cf-f213d89ce7d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "2\n",
            "3\n",
            "4\n",
            "5\n",
            "6\n",
            "7\n",
            "8\n",
            "9\n",
            "10\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "90qnUTIfuipl"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}